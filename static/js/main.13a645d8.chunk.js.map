{"version":3,"sources":["components/board/style.module.sass","store/actions.js","store/reducers.js","store/epics.js","store/store.js","components/app/app.js","components/board/props.js","components/board/board.js","index.js"],"names":["module","exports","createActions","setWinner","calculateWinner","changePlayer","clickCell","cellClicked","reset","initialState","winner","currentPlayer","grid","Array","fill","gameReducer","handleActions","state","payload","Object","assign","noAction","type","winningCombinations","gameEpic","combineEpics","action$","state$","pipe","ofType","map","value","game","mergeMapTo","some","cond","every","cell","x","rootReducer","combineReducers","epicMiddleware","createEpicMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","App","connectProps","connect","dispatch","getSign","1","2","handleClick","e","preventDefault","index","target","dataset","className","classes","card","clsx","status","i","key","data-cell","onMouseDown","onClick","render","document","getElementById"],"mappings":"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","file":"static/js/main.13a645d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"style_card__XMCcU\",\"grid\":\"style_grid__CvwWt\",\"X\":\"style_X__2L5OG\",\"O\":\"style_O__23P-N\",\"status\":\"style_status__3a5ZI\",\"reset\":\"style_reset__3BToo\"};","import { createActions } from 'redux-actions';\r\n\r\nconst SET_WINNER = 'SET_WINNER';\r\nconst CALCULATE_WINNER = 'CALCULATE_WINNER';\r\nconst CHANGE_PLAYER = 'CHANGE_PLAYER';\r\nconst CLICK_CELL = 'CLICK_CELL';\r\nconst CELL_CLICKED = 'CELL_CLICKED';\r\nconst RESET = 'RESET';\r\n\r\nexport const {\r\n  setWinner,\r\n  calculateWinner,\r\n  changePlayer,\r\n  clickCell,\r\n  cellClicked,\r\n  reset,\r\n} = createActions(\r\n  SET_WINNER,\r\n  CALCULATE_WINNER,\r\n  CHANGE_PLAYER,\r\n  CLICK_CELL,\r\n  CELL_CLICKED,\r\n  RESET,\r\n);\r\n","import { handleActions } from 'redux-actions';\r\nimport { setWinner, changePlayer, cellClicked, reset } from './actions';\r\n\r\nconst initialState = {\r\n  winner: null,\r\n  currentPlayer: 1,\r\n  grid: Array(9).fill(0),\r\n};\r\n\r\nexport const gameReducer = handleActions(\r\n  {\r\n    [setWinner]: (state, { payload }) => ({\r\n      ...state,\r\n      winner: payload,\r\n    }),\r\n    [changePlayer]: state => ({\r\n      ...state,\r\n      currentPlayer: state.currentPlayer === 1 ? 2 : 1,\r\n    }),\r\n    [cellClicked]: (state, { payload }) => ({\r\n      ...state,\r\n      grid: Object.assign([...state.grid], { [payload]: state.currentPlayer }),\r\n    }),\r\n    [reset]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n","import {\r\n  setWinner,\r\n  calculateWinner,\r\n  changePlayer,\r\n  clickCell,\r\n  cellClicked,\r\n} from './actions';\r\nimport { ofType, combineEpics } from 'redux-observable';\r\nimport { map, mergeMapTo } from 'rxjs/operators';\r\n\r\nconst noAction = { type: 'NO_ACTION' };\r\n\r\nconst winningCombinations = [\r\n  [1, 2, 3],\r\n  [4, 5, 6],\r\n  [7, 8, 9],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [3, 6, 9],\r\n  [1, 5, 9],\r\n  [3, 5, 7],\r\n];\r\n\r\nconst clickCellEpic = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(clickCell),\r\n    map(({ payload }) => {\r\n      const { grid, winner } = state$.value.game;\r\n\r\n      if (grid[payload] || winner) {\r\n        return noAction;\r\n      } else {\r\n        return cellClicked(payload);\r\n      }\r\n    }),\r\n  );\r\n\r\nconst cellClickedEpic = action$ =>\r\n  action$.pipe(\r\n    ofType(cellClicked),\r\n    mergeMapTo([calculateWinner(), changePlayer()]),\r\n  );\r\n\r\nconst calculateWinnerEpic = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(calculateWinner),\r\n    map(() => {\r\n      const { grid, currentPlayer } = state$.value.game;\r\n\r\n      const won = winningCombinations.some(cond =>\r\n        cond.every(cell => grid[cell - 1] === currentPlayer),\r\n      );\r\n\r\n      if (won) {\r\n        return setWinner(currentPlayer);\r\n      } else if (grid.every(x => x)) {\r\n        return setWinner(0);\r\n      } else {\r\n        return noAction;\r\n      }\r\n    }),\r\n  );\r\n\r\nconst gameEpic = combineEpics(clickCellEpic, cellClickedEpic, calculateWinnerEpic);\r\n\r\nexport { gameEpic };\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { gameReducer } from './reducers';\r\nimport { gameEpic } from './epics';\r\n\r\nconst rootReducer = combineReducers({ game: gameReducer });\r\nconst epicMiddleware = createEpicMiddleware();\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\r\n);\r\n\r\nepicMiddleware.run(gameEpic);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport { Board } from 'components';\nimport { Provider } from 'react-redux';\nimport store from 'store';\n\nconst App = () => (\n  <Provider store={store}>\n    <Board />\n  </Provider>\n);\n\nexport default App;\n","import { setWinner, changePlayer, clickCell, reset } from 'store';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = ({ game: { winner, currentPlayer, grid } }) => ({\r\n  winner,\r\n  currentPlayer,\r\n  grid,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setWinner: payload => dispatch(setWinner(payload)),\r\n  changePlayer: () => dispatch(changePlayer()),\r\n  clickCell: payload => dispatch(clickCell(payload)),\r\n  reset: () => dispatch(reset()),\r\n});\r\n\r\nexport const connectProps = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n);\r\n","import React from 'react';\nimport classes from './style.module.sass';\nimport clsx from 'clsx';\nimport { connectProps } from './props';\n\nconst getSign = currentPlayer =>\n  ({\n    1: 'X',\n    2: 'O',\n  }[currentPlayer]);\n\nconst Board = ({ winner, currentPlayer, grid, clickCell, reset }) => {\n  const handleClick = e => {\n    e.preventDefault();\n\n    const index = e.target.dataset.cell;\n\n    clickCell(index);\n  };\n\n  return (\n    <div className={classes.card}>\n      <h1 className={clsx(classes.status, winner && classes[getSign(winner)])}>\n        {winner === 0\n          ? `No Winner`\n          : winner > 0\n          ? `The Winner is: ${getSign(winner)}`\n          : `Current Player: ${getSign(currentPlayer)}`}\n      </h1>\n      <div className={classes.grid}>\n        {grid.map((x, i) => (\n          <div\n            key={i}\n            className={classes[getSign(x)]}\n            data-cell={i}\n            onMouseDown={handleClick}\n          >\n            {getSign(x)}\n          </div>\n        ))}\n      </div>\n      <button className={classes.reset} onClick={reset}>\n        RESET\n      </button>\n    </div>\n  );\n};\n\nexport default connectProps(Board);\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { App } from './components';\r\nimport './style.sass';\r\n\r\nrender(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}