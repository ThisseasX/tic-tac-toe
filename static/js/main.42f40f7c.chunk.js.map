{"version":3,"sources":["components/board/style.module.sass","store/actions.js","store/reducers.js","utils/calculate-winner.js","store/epics.js","store/store.js","components/app/app.js","components/board/props.js","components/board/board.js","index.js"],"names":["module","exports","createActions","setWinner","calculateWinner","changePlayer","clickCell","cellClicked","reset","initialState","winner","currentPlayer","grid","Array","fill","gameReducer","handleActions","state","payload","Object","assign","winningCombinations","mapToGridValues","map","combination","cell","winningCombination","reduce","won","flow","find","first","noAction","type","gameEpic","combineEpics","action$","state$","pipe","ofType","filter","value","game","mergeMap","calculateWinnerUtil","every","identity","rootReducer","combineReducers","epicMiddleware","createEpicMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","App","connectProps","connect","dispatch","getSign","1","2","handleClick","e","preventDefault","target","dataset","className","classes","card","clsx","status","index","key","data-cell","onMouseDown","onClick","render","document","getElementById"],"mappings":"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","file":"static/js/main.42f40f7c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"style_card__18Bqd\",\"grid\":\"style_grid__LeNmk\",\"X\":\"style_X__1G2Qu\",\"O\":\"style_O__2RVng\",\"status\":\"style_status__1BtC0\",\"reset\":\"style_reset__1xo64\"};","import { createActions } from 'redux-actions';\r\n\r\nconst SET_WINNER = 'SET_WINNER';\r\nconst CALCULATE_WINNER = 'CALCULATE_WINNER';\r\nconst CHANGE_PLAYER = 'CHANGE_PLAYER';\r\nconst CLICK_CELL = 'CLICK_CELL';\r\nconst CELL_CLICKED = 'CELL_CLICKED';\r\nconst RESET = 'RESET';\r\n\r\nexport const {\r\n  setWinner,\r\n  calculateWinner,\r\n  changePlayer,\r\n  clickCell,\r\n  cellClicked,\r\n  reset,\r\n} = createActions(\r\n  SET_WINNER,\r\n  CALCULATE_WINNER,\r\n  CHANGE_PLAYER,\r\n  CLICK_CELL,\r\n  CELL_CLICKED,\r\n  RESET,\r\n);\r\n","import { handleActions } from 'redux-actions';\r\nimport { setWinner, changePlayer, cellClicked, reset } from './actions';\r\n\r\nconst initialState = {\r\n  winner: null,\r\n  currentPlayer: 1,\r\n  grid: Array(9).fill(0),\r\n};\r\n\r\nexport const gameReducer = handleActions(\r\n  {\r\n    [setWinner]: (state, { payload }) => ({\r\n      ...state,\r\n      winner: payload,\r\n    }),\r\n    [changePlayer]: state => ({\r\n      ...state,\r\n      currentPlayer: (state.currentPlayer % 2) + 1,\r\n    }),\r\n    [cellClicked]: (state, { payload }) => ({\r\n      ...state,\r\n      grid: Object.assign([...state.grid], { [payload]: state.currentPlayer }),\r\n    }),\r\n    [reset]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n","import { flow, find, first } from 'lodash/fp';\r\n\r\nconst winningCombinations = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n\r\nconst mapToGridValues = grid =>\r\n  winningCombinations.map(combination => combination.map(cell => grid[cell]));\r\n\r\nconst winningCombination = combination =>\r\n  combination.reduce((won, cell) => won > 0 && won === cell && won);\r\n\r\nconst calculateWinner = grid =>\r\n  flow(\r\n    mapToGridValues,\r\n    find(winningCombination),\r\n    first,\r\n  )(grid);\r\n\r\nexport default calculateWinner;\r\n","import {\r\n  setWinner,\r\n  calculateWinner,\r\n  changePlayer,\r\n  clickCell,\r\n  cellClicked,\r\n} from './actions';\r\nimport { ofType, combineEpics } from 'redux-observable';\r\nimport { map, filter, mergeMap } from 'rxjs/operators';\r\nimport { calculateWinner as calculateWinnerUtil } from 'utils';\r\nimport { identity } from 'lodash/fp';\r\n\r\nconst noAction = { type: 'NO_ACTION' };\r\n\r\nconst clickCellEpic = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(clickCell),\r\n    filter(({ payload }) => {\r\n      const { grid, winner } = state$.value.game;\r\n      return !grid[payload] && !winner;\r\n    }),\r\n    mergeMap(({ payload }) => [\r\n      cellClicked(payload),\r\n      calculateWinner(),\r\n      changePlayer(),\r\n    ]),\r\n  );\r\n\r\nconst calculateWinnerEpic = (action$, state$) =>\r\n  action$.pipe(\r\n    ofType(calculateWinner),\r\n    map(() => {\r\n      const { grid } = state$.value.game;\r\n      const winner = calculateWinnerUtil(grid);\r\n\r\n      return winner\r\n        ? setWinner(winner)\r\n        : grid.every(identity)\r\n        ? setWinner(0)\r\n        : noAction;\r\n    }),\r\n  );\r\n\r\nconst gameEpic = combineEpics(clickCellEpic, calculateWinnerEpic);\r\n\r\nexport { gameEpic };\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { gameReducer } from './reducers';\r\nimport { gameEpic } from './epics';\r\n\r\nconst rootReducer = combineReducers({ game: gameReducer });\r\nconst epicMiddleware = createEpicMiddleware();\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(epicMiddleware)),\r\n);\r\n\r\nepicMiddleware.run(gameEpic);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { Board } from 'components';\r\nimport { Provider } from 'react-redux';\r\nimport store from 'store';\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <Board />\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","import { setWinner, changePlayer, clickCell, reset } from 'store';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = ({ game: { winner, currentPlayer, grid } }) => ({\r\n  winner,\r\n  currentPlayer,\r\n  grid,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setWinner: payload => dispatch(setWinner(payload)),\r\n  changePlayer: () => dispatch(changePlayer()),\r\n  clickCell: payload => dispatch(clickCell(payload)),\r\n  reset: () => dispatch(reset()),\r\n});\r\n\r\nexport const connectProps = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n);\r\n","import React from 'react';\r\nimport classes from './style.module.sass';\r\nimport clsx from 'clsx';\r\nimport { connectProps } from './props';\r\n\r\nconst getSign = currentPlayer =>\r\n  ({\r\n    1: 'X',\r\n    2: 'O',\r\n  }[currentPlayer]);\r\n\r\nconst Board = ({ winner, currentPlayer, grid, clickCell, reset }) => {\r\n  const handleClick = e => {\r\n    e.preventDefault();\r\n    const cell = e.target.dataset.cell;\r\n    clickCell(cell);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.card}>\r\n      <h1 className={clsx(classes.status, winner && classes[getSign(winner)])}>\r\n        {winner === 0\r\n          ? `No Winner`\r\n          : winner > 0\r\n          ? `The Winner is: ${getSign(winner)}`\r\n          : `Current Player: ${getSign(currentPlayer)}`}\r\n      </h1>\r\n      <div className={classes.grid}>\r\n        {grid.map((cell, index) => (\r\n          <div\r\n            key={index}\r\n            className={classes[getSign(cell)]}\r\n            data-cell={index}\r\n            onMouseDown={handleClick}\r\n          >\r\n            {getSign(cell)}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button className={classes.reset} onClick={reset}>\r\n        RESET\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connectProps(Board);\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { App } from './components';\r\nimport './style.sass';\r\n\r\nrender(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}